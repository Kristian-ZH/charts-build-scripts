#!/bin/bash

# This migration script is intended to be used by charts repositories using a script version of <v0.3.0.
#
# Context:
#
# Before v0.3.0, it was possible to have a chart repository that consists of a dev and release branch that have different
# contents checked into them; different READMEs, different scripts, etc. Generally, it was a common practice to check 
# packages into only the dev branch; the release branch would only consist of charts that would be released.
#
# As a result, releasing charts from dev to release involved a manual process by which assets, charts, and index.yaml changes
# were "git checkout"ed from one branch to another in order to perform a release. Since this required the manual process
# to be re-executed every single time that the dev branch changed due to required changes to the release branch, this
# process was possibly cumbersome and error-prone.
#
# Starting v0.3.0 of the scripts, it is instead expected that repositories follow a single branch structure; that is,
# we expect that users who have a separate dev and release branches to release charts by making a PR directly from
# dev to release, which means that they now have to contain the same contents (including packages).
#
# To avoid losing Git history around packages, this script assists users as a part of the migration process by
# running through all the commits in the packages/ directory of a provided remote / branch (e.g. upstream/dev-v2.5)
# and partially cherry-picking changes that occured to the packages directory to the current local branch.
# 
# This allows user to preserve the commit history from the dev branch, which include links to the original PRs 
# and metadata information such as the author / date of the commit.

set -e

# Get to the root of this git repository
cd $(git rev-parse --show-toplevel)

# Note: this is hard-coded, but in theory this script could be used to cherry-pick any
# number of directories... however, this was only tested with packages/
directories="packages"

if [[ -z ${REMOTE} ]] || [[ -z ${BRANCH} ]]; then
    echo "Usage: REMOTE=<chart> BRANCH=<version> ./scripts/cherry-pick-packages"
    exit 1
fi

if [ -n "$(git status --porcelain)" ]; then
    echo "Git needs to be clean to run this script"
    exit 1
fi

REMOTE_URL=$(git remote get-url ${REMOTE})
if ! git ls-remote --exit-code --heads ${REMOTE} ${BRANCH} >/dev/null; then
    echo "Remote '${REMOTE}' does not contain branch '${BRANCH}'."
    exit 1
fi

echo "Fetching remote '${REMOTE}' (${REMOTE_URL}) at branch '${BRANCH}'..."
git fetch ${REMOTE} ${BRANCH}
echo ""

COMMITS=($(git log --oneline --pretty=tformat:"%H %s" -b ${REMOTE}/${BRANCH} -- ${directories} | tail -r | cut -d' ' -f1))
echo "Partially cherry-picking commits from ${REMOTE}/${BRANCH}..."
echo ""

for commit in "${COMMITS[@]}"; do
    echo "cherry-pick ${commit}..."
    author="$(git log ${commit} --format='%an <%ae>' -n 1)"
    date="$(git log ${commit} --format='%aD' -n 1)"
    rm -rf ${directories}
    if git checkout ${commit} -- ${directories} 2>&1 1>/dev/null; then
        git add -A 2>&1 1>/dev/null
        git commit --allow-empty --author="${author}" --date="${date}" -m "(${BRANCH}) $(git log --format='%B' -n 1 ${commit})

(partially cherry picked from commit ${commit})"
    else
        echo ""
        echo "warn: unable to execute the cherry-pick... likely cause is because the contents of [${directories}] were deleted in this commit."
    fi
    echo ""
done